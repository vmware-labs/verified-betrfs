field value: Int

// In real code, this would stand in for something much more complex.
predicate Inv(r: Ref)
{
  acc(r.value)
}

// This method works fine.
method DistinctOfTwoInvs(a: Ref, b: Ref)
requires Inv(a)
requires Inv(b)
ensures a != b
ensures Inv(a)
ensures Inv(b)
{
  unfold Inv(a)
  unfold Inv(b)

  fold Inv(a)
  fold Inv(b)
}

method Append(s: Seq[Ref], r: Ref)
returns (res: Seq[Ref])
requires forall i: Int :: 0 <= i && i < |s| ==> Inv(s[i])
requires Inv(r)
ensures forall i: Int :: 0 <= i && i < |res| ==> Inv(res[i])
{
  res := s ++ Seq(r)

  // Need to show injectivity for the postcondition
  // forall i: Int :: 0 <= i && i < |res| ==> Inv(res[i])

  assert forall i: Int, j: Int ::
    0 <= i && i < |res| &&
    0 <= j && j < |res| &&
    i != j ==> (
      // Viper doesn't give any trouble with unfolding these:
      unfolding Inv(res[i]) in
      unfolding Inv(res[j]) in

      // This should follow for the same reason as the DistinctOfTwoInvs
      // lemma above but it doesn't.
      res[i] != res[j]
    )
}
