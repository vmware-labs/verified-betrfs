 - Better module abstraction.
    - This works as long as you keep your chain of abstract modules
      linear, although it's a bit of a pain.
    - If you try to have a diamond
      of abstract module inclusions, everything falls apart because you have
      no way to specify that the two inclusions of the same abstract module
      are the same.

- Better state machine abstraction.
    - State machine refinement is not the same as Dafny module refinement.
      If I build state machine X using state machine Y as a subcomponent,
      and then I create refinement Y' of Y, I can't automatically get an X'
      which has Y replaced with Y'. Instead I have to write a lot of boilerplate.

- Better way to specify implemenation vs spec files with including files.

- Sequence comprehension syntax

- Type aliasing is a bit broken.
    - type foo = parent.bar
    - diamond problem -- sometimes Dafny can't see type equivalence where we expect it
    - if parent.bar is a datatype, its constructors aren't aliased in at foo.

- It seems like a bug that Dafny lets you mention a generic type in a parameter list without
    mentioning the <actual types>

- How do we program generically over algebraic datatypes? Would like to
    have a datatype with an associated < method. We see the (==) trait,
    but ... how do we write our own?

- current code uses 'type' abstraction for Values; it will require lots
    of code to instantiate the Betree for specific Values.
    Prior code used <>-generics for Values, which was wordy and gross
    in a different way.
    Rob wants the best of both worlds.
    
- non-stupid implementation of sequences

- include-root

- better error messages
  - output line itself in addition to line numbers
  - anon wtf?

- auto-cast uint64 to ints
- methods on datatypes (because we don't necessarily want to use a class)

In tag slow-SplitChild,
   time dafny MutableBtree.dfy /proc:*SplitChild*
takes 3 minutes to fail.

- d6d75b81577205ab31aafa4761a97a9b6ef72d1e timeout/instability with no smoking guns in the profiler
- 1a88431e5c4ec22082a390f894878e10b2009a5f see Probe in MutableMap:449 for fix, surprising assert required

{:axiom} shouldn't be required on a bodyless function of an abstract module
which is there to introduce an obligation, should it?
    ../disk-betree/MapSpec.s.dfy(2,8): Error: the included file ../disk-betree/../lib/total_order.s.dfy contains error(s)
    ../disk-betree/../lib/total_order.s.dfy(21,73): Error: a function with an ensures clause must have a body, unless given the :axiom attribute

- [NOALIAS]
  - examples where statically enforced no-aliasing would help
    - f03fb540e4fd8e9fa7e04192fbe45120d2beeaa3 (noalias-example-00) disk-betree/MainImpl.i.dfy:73
    - ccc3169011232da48d814b8ee1662bf36e4ca198 (noalias-example-01) disk-betree/ImplDo.i.dfy:344 disk-betree/ImplState.i.dfy:100
    - a5323d0aaa5793cb2b3632ceb5c43e0fccbc66db (noalias-example-02) disk-betree/ImplSync.i.dfy:303 and following lines, :159 and following lines
    - 759c0889f4ca49cbdf6d44f27509baa3fdd7f6d3 disk-betree/ImplMarshalling.i.dfy:677 and following

- Rob's profiler didn't help here: 88b8873f549dff64fa7cb5f853aa636591a8aaae (profile-useless-00) for disk-betree/ImplSync.i.dfy::doSplit
  - `mono ~/VMware/dafny-base/dafny/Binaries/Dafny.exe ImplSync.i.dfy  /compile:0 /proc:'*doSplit*' /timeLimit:120 /z3opt:smt.qi.profile=true /z3opt:smt.qi.profile_freq=1000 > /tmp/dafny.profile`

warnings about unused non-ghost variables
warnings about if/forall statements where condition is non-ghost but body is entirely ghost
ghost { } blocks

Here's a timeout case, memorialized in a branch:
[map-comprehension-timeout 5a69ea2] map comprehension timeout. Hard to diagnose in profiler because it doesn't point to offending definitions. PivotBetree/BucketWeights.i.dfy /proc:'*WeightSplitBucketLeft*'

Another slow trigger issue, this one hard to diagnose:
on branch ugly-profile-maptype0select
tools/profile.sh PivotBetree/BucketWeights.i.dfy /proc:"*WeightBucketListItmFlush*" > /tmp/qi.log
funType:MapType0Select produces 600k triggers; profile doesn't show problem.
Commenting out BucketWeights.i.dfy:89 "solves" the problem, but (a) I'm not
sure that's actually the issue, and (b) the profiler sure didn't point me
to it.

Here's another one.
on branch hard-to-trace-map-timeout
tools/profile.sh PivotBetree/BucketWeights.i.dfy /proc:"*WeightBucketLinearInKeySetInner*"

Here's a timeout: branch timeout-annoying
/usr/bin/time .dafny/dafny//Binaries/dafny /compile:0 /timeLimit:20 lib/DataStructures/MutableMapModel.i.dfy /proc:"*allNonEmptyImpliesCountEqStorageSize*"
Profile isn't particularly enlightening:
Prover error: [quantifier_instances] Optionsd.2:36 :  10700 : 100 : 101
Prover error: [quantifier_instances] unknown.0:0 :   9700 : 100 : 101
Prover error: [quantifier_instances] MutableM.27:30 :   7300 : 100 : 101
Prover error: [quantifier_instances] funType:_16_MutableMapModel.Item.value :   7200 : 100 : 101

Timeout example:
- branch timeout-mutable-btree-toseq <c68abe1104eb72b6f56bbab67cf9ee1f3178062a>
- dafny lib/DataStructures/MutableBtreeBulkOperations.i.dfy /proc:*ToSeqSubtree


2019.12.10 meeting, trying to sort out what we think is quadratic
slowdown in Impl due to the 9 !! subobjects.

/trace all the impl files; try dealloc
  - Jon is tentatively interested in building a per-method time
  collector.
try axiom profiler
  - Rob got bullied into saying "yes" to this, but nobody will
  actually hold him to it.
try our crappy profiler
reproduce small quadratic example and observe verification times
  - and then try one of the compartmentalization techniques
  - jonh has this lock
build rustny
  - feels like more than a 1-week project
  - Some question as to whether we could get the ownerships we need
  for Nodes from the Cache. Maybe check them out like library books
  and put them back later? Can't borrow because once you borrow the
  first Node, you don't own the Cache and hence can't borrow a second
  Node.

2019/12/31 Timeout with almost no quantifier instantiations:
           commit bdf3df8e82c50f0f1afeea1621c31d623032a779
           cd lib/DataStructures
           dafny BtreeSpec.i.dfy /proc:*BuildTreeForSequence

2020/01/02 See lib/Base/total_order.i.dfy:IsStrictlySorted()
           It originally was just
           {
             reveal_IsSorted();
             forall i, j ...
           }
           but the body of IsSorted would leak to callers of
           reveal_IsStrictlySorted().

2020/01/02 See lib/Base/insert()
           It ensures something that appears to have a trigger trap
           in the ensure itself.  Consider rewriting
              ensures forall i :: pos <= i < |s| ==> insert(s, a, pos)[i+1] == s[i];
           as
              ensures insert(s, a, pos) == s[..pos] + [a] + s[pos..]
           (but this willd likely cause massive breakage throughout code)


