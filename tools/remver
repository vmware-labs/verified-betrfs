#!/usr/bin/python3
"""
The client side of remote verification: bundles up the dafny files reachable
from some root and carts them off in a call to a remote verification host.
"""
import sys
import tempfile
import os
import shutil
import subprocess

#import lib_aggregate
import lib_deps
import lib_remote

TOOLS = os.path.dirpart(os.path.realpath(__file__))
print("TOOLs %s" %  TOOLS)

def usage(msg):
    sys.stderr.write(msg + "\n")
    sys.stderr.write("Usage: %s --cmd <blar>* --stdout <path> --transfer <blah>*\n" % sys.argv[0])
    sys.exit(-1)

class RemVer:
    def __init__(self):
        self.buckets = lib_remote.parse_args(["cmd", "stdout", "transfer"], usage)
        if len(self.buckets["stdout"]) != 1:
            usage("Expected exactly one value for --stdout")

    def cleanup(self):
        shutil.rmtree(self.tardir)
        os.unlink(self.pkgfile)

    def package(self):
        self.tardir = tempfile.mkdtemp(".remver")
        #print("look in %s" % self.tardir)
        for transfer in self.buckets['transfer']:
            rootIref = lib_deps.IncludeReference(None, 0, transfer)
            for srcRef in [rootIref] + lib_deps.depsFromDfySource(rootIref):
                srcfile = srcRef.normPath
                if os.path.isdir(srcfile):
                    # We'll make the dir if we need it.
                    continue
                dstfile = os.path.join(self.tardir, srcfile)
                assert os.path.abspath(dstfile).startswith(self.tardir)  # no ..s
                try:
                    #print("makedirs %s for dest %s" % (os.path.dirname(dstfile), dstfile))
                    os.makedirs(os.path.dirname(dstfile))
                except FileExistsError:
                    pass
                shutil.copyfile(srcfile, dstfile)
        (_, self.pkgfile) = tempfile.mkstemp(".pkg.tbz")
        subprocess.call(["tar", "-C", self.tardir, "-cjf", self.pkgfile, "."])

    def compute(self):
        cmd = self.buckets["cmd"]
        cmd[0] = "DAFNY"
        hostver = "veribetrfs/tools/hostver"
        pipe = subprocess.Popen(
            ["ssh", "dafnyserver@172.17.0.2"]
            + [hostver, "--cmd"] + cmd + ["--dafnyhash", lib_remote.get_dafny_hash()],
            stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print("invoke")
        (stdout, stderr) = pipe.communicate(open(self.pkgfile, "rb").read())
        print("invoke done")
        #print(stdout)
        #print(stderr)
        (stdoutFile,) = tuple(self.buckets["stdout"])
        fp = open(stdoutFile, "wb")
        fp.write(stdout)
        fp.write(stderr)
        fp.close()

    def main(self):
        #for key in self.buckets:
            #print("Got %d args in bucket %s" % (len(self.buckets[key]), key))
        # Gather the relevant files and tar them up.
        self.package()
        # Ship the tarball up, get the tarballed results back.
        self.compute()
        self.cleanup()

RemVer().main()
